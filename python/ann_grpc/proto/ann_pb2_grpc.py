# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ann_grpc.proto.ann_pb2 as ann__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AnnServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.heartbeat = channel.unary_unary(
            '/ann.AnnService/heartbeat',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=ann__pb2.HeartbeatResponse.FromString,
        )
        self.search = channel.unary_unary(
            '/ann.AnnService/search',
            request_serializer=ann__pb2.SearchRequest.SerializeToString,
            response_deserializer=ann__pb2.SearchResponse.FromString,
        )
        self.search_by_id = channel.unary_unary(
            '/ann.AnnService/search_by_id',
            request_serializer=ann__pb2.SearchByIdRequest.SerializeToString,
            response_deserializer=ann__pb2.SearchByIdResponse.FromString,
        )


class AnnServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def heartbeat(self, request, context):
        """Check server is working."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Search neighbors from query vector."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search_by_id(self, request, context):
        """Search neighbors from ID."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnnServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'heartbeat': grpc.unary_unary_rpc_method_handler(
            servicer.heartbeat,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=ann__pb2.HeartbeatResponse.SerializeToString,
        ),
        'search': grpc.unary_unary_rpc_method_handler(
            servicer.search,
            request_deserializer=ann__pb2.SearchRequest.FromString,
            response_serializer=ann__pb2.SearchResponse.SerializeToString,
        ),
        'search_by_id': grpc.unary_unary_rpc_method_handler(
            servicer.search_by_id,
            request_deserializer=ann__pb2.SearchByIdRequest.FromString,
            response_serializer=ann__pb2.SearchByIdResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ann.AnnService', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AnnService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def heartbeat(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ann.AnnService/heartbeat',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ann__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ann.AnnService/search',
            ann__pb2.SearchRequest.SerializeToString,
            ann__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def search_by_id(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ann.AnnService/search_by_id',
            ann__pb2.SearchByIdRequest.SerializeToString,
            ann__pb2.SearchByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
